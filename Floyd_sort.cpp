#include <iostream>
using namespace std;

// Функция, которая выполняет всплытие элемента в пирамиде
void heapify(int arr[], int n, int i) {
    // Инициализируем наибольший элемент как корень текущей пирамиды (поддерева)
    int largest = i;
    // Индексы левого и правого дочерних элементов в пирамиде
    int l = 2 * i + 1;
    int r = 2 * i + 2;

    // Если левый дочерний элемент больше текущего наибольшего, то обновляем индекс наибольшего элемента
    if (l < n && arr[l] > arr[largest])
        largest = l;

    // Если правый дочерний элемент больше текущего наибольшего, то обновляем индекс наибольшего элемента
    if (r < n && arr[r] > arr[largest])
        largest = r;

    // Если наибольший элемент не корень, то меняем его местами с корнем и выполняем всплытие для нового корня
    if (largest != i) {
        swap(arr[i], arr[largest]);
        heapify(arr, n, largest);
    }
}

void FloydSort(int arr[], int n) {
    // Цикл начинаем с середины массива, так как все элементы после середины являются листьями дерева и уже являются пирамидами по себе
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    // Извлекаем элементы из пирамиды по одному и добавляем их в конец отсортированного массива
    for (int i = n - 1; i >= 0; i--) {
        // Перемещаем текущий корень в конец массива
        swap(arr[0], arr[i]);
        // Перестраиваем пирамиду, чтобы новый корень был наибольшим элементом
        heapify(arr, i, 0);
    }
}

int main() {
    int arr[] = { 12, 11, 13, 5, 6, 7 };
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << "Original array: \n";
    for (int i = 0; i < n; ++i)
        cout << arr[i] << " ";
    cout << endl;
    FloydSort(arr, n);

    cout << "\n\nSorted array: \n";
    for (int i = 0; i < n; ++i)
        cout << arr[i] << " ";
    cout << endl;

    return 0;
}




